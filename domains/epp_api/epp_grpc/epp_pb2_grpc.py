# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import contact_pb2 as contact__pb2
from . import domain_pb2 as domain__pb2
from . import epp_pb2 as epp__pb2
from . import host_pb2 as host__pb2
from . import rgp_pb2 as rgp__pb2


class EPPProxyStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DomainCheck = channel.unary_unary(
                '/epp.EPPProxy/DomainCheck',
                request_serializer=domain__pb2.DomainCheckRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainCheckReply.FromString,
                )
        self.DomainInfo = channel.unary_unary(
                '/epp.EPPProxy/DomainInfo',
                request_serializer=domain__pb2.DomainInfoRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainInfoReply.FromString,
                )
        self.DomainCreate = channel.unary_unary(
                '/epp.EPPProxy/DomainCreate',
                request_serializer=domain__pb2.DomainCreateRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainCreateReply.FromString,
                )
        self.DomainDelete = channel.unary_unary(
                '/epp.EPPProxy/DomainDelete',
                request_serializer=domain__pb2.DomainDeleteRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainDeleteReply.FromString,
                )
        self.DomainUpdate = channel.unary_unary(
                '/epp.EPPProxy/DomainUpdate',
                request_serializer=domain__pb2.DomainUpdateRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainUpdateReply.FromString,
                )
        self.DomainRenew = channel.unary_unary(
                '/epp.EPPProxy/DomainRenew',
                request_serializer=domain__pb2.DomainRenewRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainRenewReply.FromString,
                )
        self.DomainTransferQuery = channel.unary_unary(
                '/epp.EPPProxy/DomainTransferQuery',
                request_serializer=domain__pb2.DomainTransferQueryRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainTransferReply.FromString,
                )
        self.DomainTransferRequest = channel.unary_unary(
                '/epp.EPPProxy/DomainTransferRequest',
                request_serializer=domain__pb2.DomainTransferRequestRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainTransferReply.FromString,
                )
        self.DomainTransferAccept = channel.unary_unary(
                '/epp.EPPProxy/DomainTransferAccept',
                request_serializer=domain__pb2.DomainTransferAcceptRejectRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainTransferReply.FromString,
                )
        self.DomainTransferReject = channel.unary_unary(
                '/epp.EPPProxy/DomainTransferReject',
                request_serializer=domain__pb2.DomainTransferAcceptRejectRequest.SerializeToString,
                response_deserializer=domain__pb2.DomainTransferReply.FromString,
                )
        self.DomainRestoreRequest = channel.unary_unary(
                '/epp.EPPProxy/DomainRestoreRequest',
                request_serializer=rgp__pb2.RequestRequest.SerializeToString,
                response_deserializer=rgp__pb2.RestoreReply.FromString,
                )
        self.HostCheck = channel.unary_unary(
                '/epp.EPPProxy/HostCheck',
                request_serializer=host__pb2.HostCheckRequest.SerializeToString,
                response_deserializer=host__pb2.HostCheckReply.FromString,
                )
        self.HostInfo = channel.unary_unary(
                '/epp.EPPProxy/HostInfo',
                request_serializer=host__pb2.HostInfoRequest.SerializeToString,
                response_deserializer=host__pb2.HostInfoReply.FromString,
                )
        self.HostCreate = channel.unary_unary(
                '/epp.EPPProxy/HostCreate',
                request_serializer=host__pb2.HostCreateRequest.SerializeToString,
                response_deserializer=host__pb2.HostCreateReply.FromString,
                )
        self.HostDelete = channel.unary_unary(
                '/epp.EPPProxy/HostDelete',
                request_serializer=host__pb2.HostDeleteRequest.SerializeToString,
                response_deserializer=host__pb2.HostDeleteReply.FromString,
                )
        self.HostUpdate = channel.unary_unary(
                '/epp.EPPProxy/HostUpdate',
                request_serializer=host__pb2.HostUpdateRequest.SerializeToString,
                response_deserializer=host__pb2.HostUpdateReply.FromString,
                )
        self.ContactCheck = channel.unary_unary(
                '/epp.EPPProxy/ContactCheck',
                request_serializer=contact__pb2.ContactCheckRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactCheckReply.FromString,
                )
        self.ContactInfo = channel.unary_unary(
                '/epp.EPPProxy/ContactInfo',
                request_serializer=contact__pb2.ContactInfoRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactInfoReply.FromString,
                )
        self.ContactCreate = channel.unary_unary(
                '/epp.EPPProxy/ContactCreate',
                request_serializer=contact__pb2.ContactCreateRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactCreateReply.FromString,
                )
        self.ContactDelete = channel.unary_unary(
                '/epp.EPPProxy/ContactDelete',
                request_serializer=contact__pb2.ContactDeleteRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactDeleteReply.FromString,
                )
        self.ContactUpdate = channel.unary_unary(
                '/epp.EPPProxy/ContactUpdate',
                request_serializer=contact__pb2.ContactUpdateRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactUpdateReply.FromString,
                )
        self.ContactTransferQuery = channel.unary_unary(
                '/epp.EPPProxy/ContactTransferQuery',
                request_serializer=contact__pb2.ContactTransferQueryRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactTransferReply.FromString,
                )
        self.ContactTransferRequest = channel.unary_unary(
                '/epp.EPPProxy/ContactTransferRequest',
                request_serializer=contact__pb2.ContactTransferRequestRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactTransferReply.FromString,
                )
        self.ContactTransferAccept = channel.unary_unary(
                '/epp.EPPProxy/ContactTransferAccept',
                request_serializer=contact__pb2.ContactTransferRequestRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactTransferReply.FromString,
                )
        self.ContactTransferReject = channel.unary_unary(
                '/epp.EPPProxy/ContactTransferReject',
                request_serializer=contact__pb2.ContactTransferRequestRequest.SerializeToString,
                response_deserializer=contact__pb2.ContactTransferReply.FromString,
                )
        self.Poll = channel.unary_stream(
                '/epp.EPPProxy/Poll',
                request_serializer=epp__pb2.RegistryInfo.SerializeToString,
                response_deserializer=epp__pb2.PollReply.FromString,
                )
        self.NominetTagList = channel.unary_unary(
                '/epp.EPPProxy/NominetTagList',
                request_serializer=epp__pb2.RegistryInfo.SerializeToString,
                response_deserializer=epp__pb2.NominetTagListReply.FromString,
                )


class EPPProxyServicer(object):
    """Missing associated documentation comment in .proto file"""

    def DomainCheck(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainCreate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainDelete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainUpdate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainRenew(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainTransferQuery(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainTransferRequest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainTransferAccept(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainTransferReject(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DomainRestoreRequest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostCheck(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostCreate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostDelete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostUpdate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactCheck(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactCreate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactDelete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactUpdate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactTransferQuery(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactTransferRequest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactTransferAccept(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContactTransferReject(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Poll(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NominetTagList(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EPPProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DomainCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainCheck,
                    request_deserializer=domain__pb2.DomainCheckRequest.FromString,
                    response_serializer=domain__pb2.DomainCheckReply.SerializeToString,
            ),
            'DomainInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainInfo,
                    request_deserializer=domain__pb2.DomainInfoRequest.FromString,
                    response_serializer=domain__pb2.DomainInfoReply.SerializeToString,
            ),
            'DomainCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainCreate,
                    request_deserializer=domain__pb2.DomainCreateRequest.FromString,
                    response_serializer=domain__pb2.DomainCreateReply.SerializeToString,
            ),
            'DomainDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainDelete,
                    request_deserializer=domain__pb2.DomainDeleteRequest.FromString,
                    response_serializer=domain__pb2.DomainDeleteReply.SerializeToString,
            ),
            'DomainUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainUpdate,
                    request_deserializer=domain__pb2.DomainUpdateRequest.FromString,
                    response_serializer=domain__pb2.DomainUpdateReply.SerializeToString,
            ),
            'DomainRenew': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainRenew,
                    request_deserializer=domain__pb2.DomainRenewRequest.FromString,
                    response_serializer=domain__pb2.DomainRenewReply.SerializeToString,
            ),
            'DomainTransferQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainTransferQuery,
                    request_deserializer=domain__pb2.DomainTransferQueryRequest.FromString,
                    response_serializer=domain__pb2.DomainTransferReply.SerializeToString,
            ),
            'DomainTransferRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainTransferRequest,
                    request_deserializer=domain__pb2.DomainTransferRequestRequest.FromString,
                    response_serializer=domain__pb2.DomainTransferReply.SerializeToString,
            ),
            'DomainTransferAccept': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainTransferAccept,
                    request_deserializer=domain__pb2.DomainTransferAcceptRejectRequest.FromString,
                    response_serializer=domain__pb2.DomainTransferReply.SerializeToString,
            ),
            'DomainTransferReject': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainTransferReject,
                    request_deserializer=domain__pb2.DomainTransferAcceptRejectRequest.FromString,
                    response_serializer=domain__pb2.DomainTransferReply.SerializeToString,
            ),
            'DomainRestoreRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.DomainRestoreRequest,
                    request_deserializer=rgp__pb2.RequestRequest.FromString,
                    response_serializer=rgp__pb2.RestoreReply.SerializeToString,
            ),
            'HostCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HostCheck,
                    request_deserializer=host__pb2.HostCheckRequest.FromString,
                    response_serializer=host__pb2.HostCheckReply.SerializeToString,
            ),
            'HostInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.HostInfo,
                    request_deserializer=host__pb2.HostInfoRequest.FromString,
                    response_serializer=host__pb2.HostInfoReply.SerializeToString,
            ),
            'HostCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.HostCreate,
                    request_deserializer=host__pb2.HostCreateRequest.FromString,
                    response_serializer=host__pb2.HostCreateReply.SerializeToString,
            ),
            'HostDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.HostDelete,
                    request_deserializer=host__pb2.HostDeleteRequest.FromString,
                    response_serializer=host__pb2.HostDeleteReply.SerializeToString,
            ),
            'HostUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.HostUpdate,
                    request_deserializer=host__pb2.HostUpdateRequest.FromString,
                    response_serializer=host__pb2.HostUpdateReply.SerializeToString,
            ),
            'ContactCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactCheck,
                    request_deserializer=contact__pb2.ContactCheckRequest.FromString,
                    response_serializer=contact__pb2.ContactCheckReply.SerializeToString,
            ),
            'ContactInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactInfo,
                    request_deserializer=contact__pb2.ContactInfoRequest.FromString,
                    response_serializer=contact__pb2.ContactInfoReply.SerializeToString,
            ),
            'ContactCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactCreate,
                    request_deserializer=contact__pb2.ContactCreateRequest.FromString,
                    response_serializer=contact__pb2.ContactCreateReply.SerializeToString,
            ),
            'ContactDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactDelete,
                    request_deserializer=contact__pb2.ContactDeleteRequest.FromString,
                    response_serializer=contact__pb2.ContactDeleteReply.SerializeToString,
            ),
            'ContactUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactUpdate,
                    request_deserializer=contact__pb2.ContactUpdateRequest.FromString,
                    response_serializer=contact__pb2.ContactUpdateReply.SerializeToString,
            ),
            'ContactTransferQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactTransferQuery,
                    request_deserializer=contact__pb2.ContactTransferQueryRequest.FromString,
                    response_serializer=contact__pb2.ContactTransferReply.SerializeToString,
            ),
            'ContactTransferRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactTransferRequest,
                    request_deserializer=contact__pb2.ContactTransferRequestRequest.FromString,
                    response_serializer=contact__pb2.ContactTransferReply.SerializeToString,
            ),
            'ContactTransferAccept': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactTransferAccept,
                    request_deserializer=contact__pb2.ContactTransferRequestRequest.FromString,
                    response_serializer=contact__pb2.ContactTransferReply.SerializeToString,
            ),
            'ContactTransferReject': grpc.unary_unary_rpc_method_handler(
                    servicer.ContactTransferReject,
                    request_deserializer=contact__pb2.ContactTransferRequestRequest.FromString,
                    response_serializer=contact__pb2.ContactTransferReply.SerializeToString,
            ),
            'Poll': grpc.unary_stream_rpc_method_handler(
                    servicer.Poll,
                    request_deserializer=epp__pb2.RegistryInfo.FromString,
                    response_serializer=epp__pb2.PollReply.SerializeToString,
            ),
            'NominetTagList': grpc.unary_unary_rpc_method_handler(
                    servicer.NominetTagList,
                    request_deserializer=epp__pb2.RegistryInfo.FromString,
                    response_serializer=epp__pb2.NominetTagListReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'epp.EPPProxy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EPPProxy(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def DomainCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainCheck',
            domain__pb2.DomainCheckRequest.SerializeToString,
            domain__pb2.DomainCheckReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainInfo',
            domain__pb2.DomainInfoRequest.SerializeToString,
            domain__pb2.DomainInfoReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainCreate',
            domain__pb2.DomainCreateRequest.SerializeToString,
            domain__pb2.DomainCreateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainDelete',
            domain__pb2.DomainDeleteRequest.SerializeToString,
            domain__pb2.DomainDeleteReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainUpdate',
            domain__pb2.DomainUpdateRequest.SerializeToString,
            domain__pb2.DomainUpdateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainRenew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainRenew',
            domain__pb2.DomainRenewRequest.SerializeToString,
            domain__pb2.DomainRenewReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainTransferQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainTransferQuery',
            domain__pb2.DomainTransferQueryRequest.SerializeToString,
            domain__pb2.DomainTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainTransferRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainTransferRequest',
            domain__pb2.DomainTransferRequestRequest.SerializeToString,
            domain__pb2.DomainTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainTransferAccept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainTransferAccept',
            domain__pb2.DomainTransferAcceptRejectRequest.SerializeToString,
            domain__pb2.DomainTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainTransferReject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainTransferReject',
            domain__pb2.DomainTransferAcceptRejectRequest.SerializeToString,
            domain__pb2.DomainTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DomainRestoreRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/DomainRestoreRequest',
            rgp__pb2.RequestRequest.SerializeToString,
            rgp__pb2.RestoreReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/HostCheck',
            host__pb2.HostCheckRequest.SerializeToString,
            host__pb2.HostCheckReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/HostInfo',
            host__pb2.HostInfoRequest.SerializeToString,
            host__pb2.HostInfoReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/HostCreate',
            host__pb2.HostCreateRequest.SerializeToString,
            host__pb2.HostCreateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/HostDelete',
            host__pb2.HostDeleteRequest.SerializeToString,
            host__pb2.HostDeleteReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/HostUpdate',
            host__pb2.HostUpdateRequest.SerializeToString,
            host__pb2.HostUpdateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactCheck',
            contact__pb2.ContactCheckRequest.SerializeToString,
            contact__pb2.ContactCheckReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactInfo',
            contact__pb2.ContactInfoRequest.SerializeToString,
            contact__pb2.ContactInfoReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactCreate',
            contact__pb2.ContactCreateRequest.SerializeToString,
            contact__pb2.ContactCreateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactDelete',
            contact__pb2.ContactDeleteRequest.SerializeToString,
            contact__pb2.ContactDeleteReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactUpdate',
            contact__pb2.ContactUpdateRequest.SerializeToString,
            contact__pb2.ContactUpdateReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactTransferQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactTransferQuery',
            contact__pb2.ContactTransferQueryRequest.SerializeToString,
            contact__pb2.ContactTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactTransferRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactTransferRequest',
            contact__pb2.ContactTransferRequestRequest.SerializeToString,
            contact__pb2.ContactTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactTransferAccept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactTransferAccept',
            contact__pb2.ContactTransferRequestRequest.SerializeToString,
            contact__pb2.ContactTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContactTransferReject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/ContactTransferReject',
            contact__pb2.ContactTransferRequestRequest.SerializeToString,
            contact__pb2.ContactTransferReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Poll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/epp.EPPProxy/Poll',
            epp__pb2.RegistryInfo.SerializeToString,
            epp__pb2.PollReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NominetTagList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/epp.EPPProxy/NominetTagList',
            epp__pb2.RegistryInfo.SerializeToString,
            epp__pb2.NominetTagListReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
