kind: ConfigMap
apiVersion: v1
metadata:
  name: domains-django-conf
data:
  HOST: "domains.glauca.digital,domains-nginx"
  DJANGO_SETTINGS_MODULE: as207960_domains.settings
  EXTERNAL_URL: "https://domains.glauca.digital"
  RP_ID: "domains.glauca.digital"
  SENTRY_ENVIRONMENT: "prod"
  KEYCLOAK_SERVER_URL: "https://sso.as207960.net"
  KEYCLOAK_REALM: master
  KEYCLOAK_SCOPES: "openid email profile offline_access"
  KEYCLOAK_CLIENT_ID: "domains"
  DB_HOST: "cockroachdb"
  DB_NAME: "domains"
  BILLING_URL: "http://billing-nginx"
  HEXDNS_URL: "https://dns.glauca.digital"
  FEEDBACK_URL: "http://feedback-nginx"
  PAT_URL: "http://oauth-nginx"
  EPP_PROXY_ADDR: "epp-proxy:50051"
  EPP_PROXY_CA: "/ca-cert/ca.pem"
  EMAIL_FROM: "Glauca Domains <domains@glauca.digital>"
  EMAIL_HOST: "mx.postal.as207960.net"
  EMAIL_PORT: "25"
  EMAIL_HOST_USER: "as207960/main"
  GCHAT_PROJECT_ID: "226795660453"
  GCHAT_SERVICE_ACCOUNT_FILE: "/google-creds/sa.json"
  PRIV_KEY_LOCATION: "/privkey/privkey.pem"
  RESOLVER_ADDR: "hexdns-unbound"
  RESOLVER_PORT: "5053"
  GRPC_POLL_STRATEGY: "epoll1"
  POSTAL_PUBLIC_KEY: >-
    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQChELn1Fkauo6bduyGeXNca/z27OYNMd85JZMlNiycfFHaAXzgPd53OKVSbyzBuILFPYmzkfaF
    uOCW2qgvFd8cAye6qLsUAqEetiuRTPpAysX3hss1TqIML51kb0ADTmylKi3Hr553qrDy9AEMFmvaKnTH8o0YFozGk0QtlmiLtXQIDAQAB
  ISNIC_CONTACT_EMAIL: "isnic-auto@as207960.ltd.uk"
  S3_ENDPOINT: "https://s3.as207960.net"
  S3_REGION: "garage"
  S3_BUCKET: "domains-django"
  S3_ACCESS_KEY_ID: "GKe2b478cf06ab7638ab97beb4"
  S3_CUSTOM_DOMAIN: "domains-django.content.as207960.net"
  STATIC_URL: "https://domains-django.content.as207960.net/"
  MEDIA_URL: "https://domains-django.content.as207960.net/"
  AFNIC_PROXY_CONTACT: "O-ASN34"
  EURID_PROXY_CONTACT: "c41743909"
  EURID_BILLING_CONTACT: "c41545983"
  LISTMONK_TEMPLATE_ID: "3"
  LISTMONK_URL: "https://listmonk.as207960.net"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domains-django
  labels:
    app: domains
    part: django
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domains
      part: django
  template:
    metadata:
      annotations:
        cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
      labels:
        app: domains
        part: django
    spec:
      volumes:
        - name: ca-cert
          configMap:
            name: epp-ca
        - name: google-creds
          secret:
            secretName: domains-google-creds
        - name: privkey
          secret:
            secretName: domains-jwt-priv
      initContainers:
        - name: django
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "python3 manage.py collectstatic --noinput && python3 manage.py migrate && python3 manage.py sync-keycloak"]
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom: &envFrom
            - configMapRef:
                name: domains-django-conf
            - secretRef:
                name: domains-db-creds
              prefix: "DB_"
            - secretRef:
                name: domains-django-secret
            - secretRef:
                name: domains-keycloak
              prefix: "KEYCLOAK_"
            - secretRef:
                name: domains-celery
              prefix: "CELERY_"
            - secretRef:
                name: verisign-ns-key
              prefix: "VERISIGN_NS_"
            - secretRef:
                name: domains-rrpproxy
              prefix: "RRPPROXY_"
            - secretRef:
                name: domains-rpc
            - secretRef:
                name: domains-s3
            - secretRef:
                name: domains-switch
            - secretRef:
                name: domains-email
              prefix: "EMAIL_"
            - secretRef:
                name: domains-cloudflare
              prefix: "CLOUDFLARE_"
      containers:
        - name: gunicorn
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: ["gunicorn", "-w", "4", "-b", "[::]:8000", "--forwarded-allow-ips", "*", "--access-logfile", "-", "--log-level=debug", "--timeout=90", "as207960_domains.wsgi:application"]
          ports:
            - containerPort: 8000
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom: *envFrom
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-django
spec:
  podSelector:
    matchLabels:
      app: domains
      part: django
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: domains-run-renewal
spec:
  schedule: "00 5 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
          labels:
            app: domains
            part-type: cronjob
            part: renewal
        spec:
          volumes:
            - name: ca-cert
              configMap:
                name: epp-ca
            - name: google-creds
              secret:
                secretName: domains-google-creds
            - name: privkey
              secret:
                secretName: domains-jwt-priv
          containers:
            - name: django
              image: as207960/domains-django:(version)
              imagePullPolicy: IfNotPresent
              command: ["sh", "-c", "python3 manage.py run-renewal"]
              volumeMounts:
                - mountPath: "/ca-cert/"
                  name: ca-cert
                - mountPath: "/google-creds/"
                  name: google-creds
                - mountPath: "/privkey/"
                  name: privkey
              envFrom:
                - configMapRef:
                    name: domains-django-conf
                - secretRef:
                    name: domains-db-creds
                  prefix: "DB_"
                - secretRef:
                    name: domains-django-secret
                - secretRef:
                    name: domains-keycloak
                  prefix: "KEYCLOAK_"
                - secretRef:
                    name: domains-celery
                  prefix: "CELERY_"
                - secretRef:
                    name: verisign-ns-key
                  prefix: "VERISIGN_NS_"
                - secretRef:
                    name: domains-rrpproxy
                  prefix: "RRPPROXY_"
                - secretRef:
                    name: domains-rpc
                - secretRef:
                    name: domains-s3
                - secretRef:
                    name: domains-switch
                - secretRef:
                    name: domains-cloudflare
                  prefix: "CLOUDFLARE_"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: domains-run-cds
spec:
  schedule: "17 * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
          labels:
            app: domains
            part-type: cronjob
            part: cds
        spec:
          volumes:
            - name: ca-cert
              configMap:
                name: epp-ca
            - name: google-creds
              secret:
                secretName: domains-google-creds
            - name: privkey
              secret:
                secretName: domains-jwt-priv
          containers:
            - name: django
              image: as207960/domains-django:(version)
              imagePullPolicy: IfNotPresent
              command: ["sh", "-c", "python3 manage.py run-cds"]
              volumeMounts:
                - mountPath: "/ca-cert/"
                  name: ca-cert
                - mountPath: "/google-creds/"
                  name: google-creds
                - mountPath: "/privkey/"
                  name: privkey
              envFrom:
                - configMapRef:
                    name: domains-django-conf
                - secretRef:
                    name: domains-db-creds
                  prefix: "DB_"
                - secretRef:
                    name: domains-django-secret
                - secretRef:
                    name: domains-keycloak
                  prefix: "KEYCLOAK_"
                - secretRef:
                    name: domains-celery
                  prefix: "CELERY_"
                - secretRef:
                    name: verisign-ns-key
                  prefix: "VERISIGN_NS_"
                - secretRef:
                    name: domains-rrpproxy
                  prefix: "RRPPROXY_"
                - secretRef:
                    name: domains-rpc
                - secretRef:
                    name: domains-s3
                - secretRef:
                    name: domains-switch
                - secretRef:
                    name: domains-cloudflare
                  prefix: "CLOUDFLARE_"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: domains-run-remind-push-transfer
spec:
  schedule: "00 10 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
          labels:
            app: domains
            part-type: cronjob
            part: cds
        spec:
          volumes:
            - name: ca-cert
              configMap:
                name: epp-ca
            - name: google-creds
              secret:
                secretName: domains-google-creds
            - name: privkey
              secret:
                secretName: domains-jwt-priv
          containers:
            - name: django
              image: as207960/domains-django:(version)
              imagePullPolicy: IfNotPresent
              command: ["sh", "-c", "python3 manage.py run-remind-push-transfer"]
              volumeMounts:
                - mountPath: "/ca-cert/"
                  name: ca-cert
                - mountPath: "/google-creds/"
                  name: google-creds
                - mountPath: "/privkey/"
                  name: privkey
              envFrom:
                - configMapRef:
                    name: domains-django-conf
                - secretRef:
                    name: domains-db-creds
                  prefix: "DB_"
                - secretRef:
                    name: domains-django-secret
                - secretRef:
                    name: domains-keycloak
                  prefix: "KEYCLOAK_"
                - secretRef:
                    name: domains-celery
                  prefix: "CELERY_"
                - secretRef:
                    name: verisign-ns-key
                  prefix: "VERISIGN_NS_"
                - secretRef:
                    name: domains-rrpproxy
                  prefix: "RRPPROXY_"
                - secretRef:
                    name: domains-rpc
                - secretRef:
                    name: domains-s3
                - secretRef:
                    name: domains-switch
                - secretRef:
                    name: domains-cloudflare
                  prefix: "CLOUDFLARE_"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: domains-run-switch-dmarc-spf-report
spec:
  schedule: "00 12 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
          labels:
            app: domains
            part-type: cronjob
            part: cds
        spec:
          volumes:
            - name: ca-cert
              configMap:
                name: epp-ca
            - name: google-creds
              secret:
                secretName: domains-google-creds
            - name: privkey
              secret:
                secretName: domains-jwt-priv
          containers:
            - name: django
              image: as207960/domains-django:(version)
              imagePullPolicy: IfNotPresent
              command: ["sh", "-c", "python3 manage.py run-switch-dmarc-spf-report"]
              volumeMounts:
                - mountPath: "/ca-cert/"
                  name: ca-cert
                - mountPath: "/google-creds/"
                  name: google-creds
                - mountPath: "/privkey/"
                  name: privkey
              envFrom:
                - configMapRef:
                    name: domains-django-conf
                - secretRef:
                    name: domains-db-creds
                  prefix: "DB_"
                - secretRef:
                    name: domains-django-secret
                - secretRef:
                    name: domains-keycloak
                  prefix: "KEYCLOAK_"
                - secretRef:
                    name: domains-celery
                  prefix: "CELERY_"
                - secretRef:
                    name: verisign-ns-key
                  prefix: "VERISIGN_NS_"
                - secretRef:
                    name: domains-rrpproxy
                  prefix: "RRPPROXY_"
                - secretRef:
                    name: domains-rpc
                - secretRef:
                    name: domains-s3
                - secretRef:
                    name: domains-switch
                - secretRef:
                    name: domains-cloudflare
                  prefix: "CLOUDFLARE_"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: domains-run-switch-dnssec-report
spec:
  schedule: "00 12 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
          labels:
            app: domains
            part-type: cronjob
            part: cds
        spec:
          volumes:
            - name: ca-cert
              configMap:
                name: epp-ca
            - name: google-creds
              secret:
                secretName: domains-google-creds
            - name: privkey
              secret:
                secretName: domains-jwt-priv
          containers:
            - name: django
              image: as207960/domains-django:(version)
              imagePullPolicy: IfNotPresent
              command: ["sh", "-c", "python3 manage.py run-switch-dnssec-report"]
              volumeMounts:
                - mountPath: "/ca-cert/"
                  name: ca-cert
                - mountPath: "/google-creds/"
                  name: google-creds
                - mountPath: "/privkey/"
                  name: privkey
              envFrom:
                - configMapRef:
                    name: domains-django-conf
                - secretRef:
                    name: domains-db-creds
                  prefix: "DB_"
                - secretRef:
                    name: domains-django-secret
                - secretRef:
                    name: domains-keycloak
                  prefix: "KEYCLOAK_"
                - secretRef:
                    name: domains-celery
                  prefix: "CELERY_"
                - secretRef:
                    name: verisign-ns-key
                  prefix: "VERISIGN_NS_"
                - secretRef:
                    name: domains-rrpproxy
                  prefix: "RRPPROXY_"
                - secretRef:
                    name: domains-rpc
                - secretRef:
                    name: domains-s3
                - secretRef:
                    name: domains-switch
                - secretRef:
                    name: domains-cloudflare
                  prefix: "CLOUDFLARE_"
          restartPolicy: OnFailure
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-cronjob
spec:
  podSelector:
    matchLabels:
      app: domains
      part-type: cronjob
  policyTypes:
  - Ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-celery
  labels:
    app: domains
    part: celery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domains
      part: celery
  template:
    metadata:
      annotations:
        cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
      labels:
        app: domains
        part: celery
    spec:
      volumes:
        - name: ca-cert
          configMap:
            name: epp-ca
        - name: google-creds
          secret:
            secretName: domains-google-creds
        - name: privkey
          secret:
            secretName: domains-jwt-priv
      containers:
        - name: grpc
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: ["celery",  "-A", "as207960_domains", "worker", "--loglevel=INFO", "-c", "4"]
          ports:
            - containerPort: 50051
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom:
            - configMapRef:
                name: domains-django-conf
            - secretRef:
                name: domains-db-creds
              prefix: "DB_"
            - secretRef:
                name: domains-django-secret
            - secretRef:
                name: domains-keycloak
              prefix: "KEYCLOAK_"
            - secretRef:
                name: domains-celery
              prefix: "CELERY_"
            - secretRef:
                name: verisign-ns-key
              prefix: "VERISIGN_NS_"
            - secretRef:
                name: domains-rrpproxy
              prefix: "RRPPROXY_"
            - secretRef:
                name: domains-rpc
            - secretRef:
                name: domains-s3
            - secretRef:
                name: domains-switch
            - secretRef:
                name: domains-cloudflare
              prefix: "CLOUDFLARE_"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-celery
spec:
  podSelector:
    matchLabels:
      app: domains
      part: celery
  policyTypes:
  - Ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-whois-grpc
  labels:
    app: domains
    part: whois
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domains
      part: whois
  template:
    metadata:
      annotations:
        cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
      labels:
        app: domains
        part: whois
    spec:
      volumes:
        - name: ca-cert
          configMap:
            name: epp-ca
        - name: google-creds
          secret:
            secretName: domains-google-creds
        - name: privkey
          secret:
            secretName: domains-jwt-priv
      containers:
        - name: grpc
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "python3 manage.py grpcserver -v 2 --traceback"]
          ports:
            - containerPort: 50051
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom:
            - configMapRef:
                name: domains-django-conf
            - secretRef:
                name: domains-db-creds
              prefix: "DB_"
            - secretRef:
                name: domains-django-secret
            - secretRef:
                name: domains-keycloak
              prefix: "KEYCLOAK_"
            - secretRef:
                name: domains-celery
              prefix: "CELERY_"
            - secretRef:
                name: verisign-ns-key
              prefix: "VERISIGN_NS_"
            - secretRef:
                name: domains-rrpproxy
              prefix: "RRPPROXY_"
            - secretRef:
                name: domains-rpc
            - secretRef:
                name: domains-s3
            - secretRef:
                name: domains-switch
            - secretRef:
                name: domains-cloudflare
              prefix: "CLOUDFLARE_"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-django
spec:
  podSelector:
    matchLabels:
      app: domains
      part: whois
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: whois
          part: django
    - podSelector:
        matchLabels:
          app: whois
          part: port43
    ports:
    - protocol: TCP
      port: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-rpc
  labels:
    app: domains
    part: rpc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domains
      part: rpc
  template:
    metadata:
      annotations:
        cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
      labels:
        app: domains
        part: rpc
    spec:
      volumes:
        - name: ca-cert
          configMap:
            name: epp-ca
        - name: google-creds
          secret:
            secretName: domains-google-creds
        - name: privkey
          secret:
            secretName: domains-jwt-priv
      containers:
        - name: rpc
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: [ "sh", "-c", "python3 manage.py run-rpc" ]
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom:
            - configMapRef:
                name: domains-django-conf
            - secretRef:
                name: domains-db-creds
              prefix: "DB_"
            - secretRef:
                name: domains-django-secret
            - secretRef:
                name: domains-keycloak
              prefix: "KEYCLOAK_"
            - secretRef:
                name: domains-celery
              prefix: "CELERY_"
            - secretRef:
                name: verisign-ns-key
              prefix: "VERISIGN_NS_"
            - secretRef:
                name: domains-rrpproxy
              prefix: "RRPPROXY_"
            - secretRef:
                name: domains-rpc
            - secretRef:
                name: domains-s3
            - secretRef:
                name: domains-switch
            - secretRef:
                name: domains-cloudflare
              prefix: "CLOUDFLARE_"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-rpc
spec:
  podSelector:
    matchLabels:
      app: domains
      part: rpc
  policyTypes:
  - Ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: domain-poll
  labels:
    app: domains
    part: poll
spec:
  replicas: 1
  selector:
    matchLabels:
      app: domains
      part: poll
  template:
    metadata:
      annotations:
        cni.projectcalico.org/ipv6pools: "[\"default-ipv6-ippool\"]"
      labels:
        app: domains
        part: poll
    spec:
      volumes:
        - name: ca-cert
          configMap:
            name: epp-ca
        - name: google-creds
          secret:
            secretName: domains-google-creds
        - name: privkey
          secret:
            secretName: domains-jwt-priv
      containers:
        - name: poll
          image: as207960/domains-django:(version)
          imagePullPolicy: IfNotPresent
          command: [ "sh", "-c", "python3 manage.py run-epp-poll centralnic eurid id godaddy nominet rrpproxy switch traficom" ]
          volumeMounts:
            - mountPath: "/ca-cert/"
              name: ca-cert
            - mountPath: "/google-creds/"
              name: google-creds
            - mountPath: "/privkey/"
              name: privkey
          envFrom:
            - configMapRef:
                name: domains-django-conf
            - secretRef:
                name: domains-db-creds
              prefix: "DB_"
            - secretRef:
                name: domains-django-secret
            - secretRef:
                name: domains-keycloak
              prefix: "KEYCLOAK_"
            - secretRef:
                name: domains-celery
              prefix: "CELERY_"
            - secretRef:
                name: verisign-ns-key
              prefix: "VERISIGN_NS_"
            - secretRef:
                name: domains-rrpproxy
              prefix: "RRPPROXY_"
            - secretRef:
                name: domains-rpc
            - secretRef:
                name: domains-s3
            - secretRef:
                name: domains-switch
            - secretRef:
                name: domains-cloudflare
              prefix: "CLOUDFLARE_"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: domains-poll
spec:
  podSelector:
    matchLabels:
      app: domains
      part: poll
  policyTypes:
  - Ingress
---
apiVersion: v1
kind: Service
metadata:
  name: domains-django
  labels:
    app: domains
    part: django
spec:
  selector:
    app: domains
    part: django
  ports:
    - port: 8000
      targetPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: domains-whois-grpc
  labels:
    app: domains
    part: whois
spec:
  selector:
    app: domains
    part: whois
  ports:
    - port: 50051
      targetPort: 50051
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: domains-ingress
  annotations:
    cert-manager.io/cluster-issuer: "gts"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - domains.glauca.digital
      secretName: domains-tls
  rules:
    - host: domains.glauca.digital
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: domains-django
                port:
                  number: 8000
